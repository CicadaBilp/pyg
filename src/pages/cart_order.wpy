<style lang="less">
page {
  background-color: #fff;
}
.divider {
  background-color: #f4f4f4;
}
.address {
  &-info {
    height: 222rpx;
    padding-bottom: 15rpx;
    box-sizing: border-box;
    position: relative;
    background-color: #fff;
    display: flex;
    flex-direction: column;
    align-content: center;
    justify-content: span;
    .space-between {
      justify-content: space-between;
    }
    .item {
      padding: 22rpx 16rpx;
      display: flex;
      flex-wrap: wrap;
      font-size: 32rpx;
      line-height: 1.3;

      .note {
        width: 160rpx;
      }
      .detail {
        max-width: 560rpx;
      }
      .address-phone {
        margin-right: 82rpx;
      }
      .icon-jiantouyou {
        position: absolute;
        right: 10rpx;
      }
      .icon-jiantouyou:before {
        font-size: 24rpx;
        color: #999;
        line-height: 1;
        width: 15rpx;
        height: 25rpx;
      }
    }
  }
  &-border {
    width: 750rpx;
    height: 15rpx;
    position: absolute;
    bottom: 0;
    left: 0;
  }
  &-add {
    height: 222rpx;
    &-btn {
      width: 360rpx;
      height: 80rpx;
      background-color: #f4f4f4;
      border-radius: 5rpx;
      color: #ccc;
      font-size: 32rpx;
      display: flex;
      justify-content: center;
      align-items: center;
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
    }
  }
}

.product {
  &-item {
    display: flex;
    padding: 30rpx 20rpx;
    position: relative;
    &::after {
      content: '';
      position: absolute;
      left: 20rpx;
      right: 0;
      bottom: 0;
      border-bottom: 1rpx solid #ddd;
    }
  }
  &-left {
    margin-right: 26rpx;
    &,
    .product-img {
      width: 200rpx;
      height: 200rpx;
      background-color: #eee;
    }
  }
  &-right {
    width: 480rpx;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    position: relative;
  }
  &-name {
    height: 84rpx;
    font-size: 30rpx;
    line-height: 1.4;
    /* 多行文字隐藏省略号 */
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }
  &-price {
    color: #ff2d4a;
    &-symbol,
    &-decimal {
      font-size: 28rpx;
    }
    &-integer {
      font-size: 44rpx;
    }
  }
  &-count {
    position: absolute;
    right: 0;
    bottom: 0;
    letter-spacing: 2rpx;
    color: #999;
  }
}

.order {
  &-list {
    background-color: #fff;
  }
  &-total-item {
    height: 60rpx;
    background-color: #fff;
    padding: 0 20rpx;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
    &-right {
      color: #ff2d4a;
    }
  }
  &-cell {
    height: 88rpx;
    background-color: #fff;
    padding: 0 20rpx;
    display: flex;
    align-items: center;
    position: relative;
    justify-content: space-between;
    &::after {
      content: '';
      position: absolute;
      border-top: 1rpx solid #ddd;
      left: 20rpx;
      right: 20rpx;
      top: -1rpx;
    }
    .btn-line {
      border: 2rpx solid #999;
      border-radius: 5rpx;
      width: 156rpx;
      height: 56rpx;
      display: flex;
      justify-content: center;
      align-items: center;
      margin-left: 40rpx;
    }
    .btn-color-main {
      color: #ff2d4a;
    }
  }
  &-pay {
    background-color: #fff;
    padding: 20rpx 20rpx 60rpx;
    font-size: 30rpx;
    text-align: right;
    &-head {
      margin-bottom: 20rpx;
    }
    &-total {
      color: #ff2d4a;
    }
    &-btn,
    .login-btn {
      background-color: #00c000;
      display: flex;
      height: 80rpx;
      justify-content: center;
      align-items: center;
      color: #fff;
      font-size: 30rpx;
      border-radius: 5rpx;
      margin-bottom: 20rpx;
      &.disabled {
        background-color: #ddd;
      }
    }
  }
}
</style>
<template>
  <Address>
    <view class="address-info">
      <block wx:if="{{ address }}">
        <view class="item space-between">
          <view class="col">
            <text class="note">收货人：</text>
            <text class="detail">{{address.userName}}</text>
          </view>
          <view class="col">
            <text class="address-phone">{{address.telNumber}}</text>
            <view class="iconfont icon-jiantouyou" @tap=""></view>
          </view>
        </view>
        <view class="item">
          <text class="note">收货地址：</text>
          <text class="detail">{{address.userAddressMerge}}</text>
        </view>
      </block>
      <block wx:else>
        <view class="address-add-btn" @tap="chooseAdderss">+ 新增地址</view>
      </block>
      <image class="address-border" src="/assets/images/cart_border@2x.png" alt="" />
    </view>
  </Address>
  <view class="divider"></view>
  <view class="order-list">
    <block wx:for="{{orderList}}" wx:key="{{item.goods_id}}">
      <view class="product-item">
        <navigator url="/pages/goods_detail?goods_id={{item.goods_id}}" class="product-left">
          <image class="product-img image-holder" src="{{item.goods_small_logo}}" />
        </navigator>
        <view class="product-right">
          <navigator url="/pages/goods_detail?goods_id={{item.goods_id}}" class="product-name">
          {{item.goods_name}}
          </navigator>
          <view class="product-price">
            <text class="product-price-symbol">￥</text>
            <text class="product-price-integer">{{item.goods_price * item.goods_num}}</text>
            <text class="product-price-decimal">.00</text>
          </view>
          <view class="product-count">x{{item.goods_num}}</view>
        </view>
      </view>
    </block>
    <view class="order-cell">
      项目测试使用，支付成功后我们不会为您发货
    </view>
  </view>
  <view class="divider"></view>
  <view class="order-total">
    <view class="order-total-item">
      <view class="order-total-item-left">商品金额</view>
      <view class="order-total-item-right">￥ {{totalPrice}}</view>
    </view>
    <view class="order-total-item">
      <view class="order-total-item-left">运费</view>
      <view class="order-total-item-right">+￥6.00</view>
    </view>
  </view>
  <view class="order-pay">
    <view class="order-pay-head">实付金额：<text class="order-pay-total">￥{{totalPrice+6}}</text></view>
    <!--
      11.0.1 微信登录授权按钮
      微信已经废除 wx.getUserInfo 这个接口，现在只能通过按钮，获取用户的登录信息
      11.0.2  open-type="getUserInfo" 指定按钮开放能力为获取用户信息
      11.0.3  配合  bind:getuserinfo 事件获取获取用户信息
    -->
    <!-- 11.0.9.3 通过 token 判断切换显示登录按钮还是下单按钮 -->
    <block  wx:if="{{ !token }}" >
      <button class="login-btn" open-type="getUserInfo" @getuserinfo="login">点击登录后下单</button>
    </block>
    <block wx:else>
      <view class="login-btn order-pay-btn" @tap="pay">微信支付</view>
    </block>
  </view>

</template>

<script>
import wepy from 'wepy'
import fetch from '../utils/fetch'

export default class CartOrder extends wepy.page {
  config = {
    navigationBarTitleText: '确认订单',
    backgroundColor: '#fff'
  }
  data={
    orderList:[],
    address:'',
    token:''
  }
  computed={
    totalPrice(){
      let total = 0
      this.orderList.forEach(item => total += item.goods_num * item.goods_price)
      return total
    }
  }
  methods={
    //点击新增地址或右箭头,调用微信方法,用户选择完地址后返回地址信息
    async chooseAdderss(){
      //调用微信接口,获取用户选择的地址,存入缓存
      let res = await wepy.chooseAddress()
      wepy.setStorageSync('address',res)
      //再调用getAddress方法展示
      this.getAddress()

    },
    //点击登录按钮,发送请求获取code和用户密文,再将其发送到公司服务器,最终返回token
    async login(e){
      let res = await wepy.login()
      //console.log(res.code);
      //console.log(e);
      const {encryptedData,iv,rawData,signature} = e.detail
      let data = {
        code:res.code,
        encryptedData,
        iv,
        rawData,
        signature
      }
      //获取到code和用户密文等数据,发送到公司服务器
      let result = await fetch({
        url:'/users/wxlogin',
        method:'POST',
        data
      })
      console.log(result);
      this.token = result.data.data.token
      //将获取的唯一标识token存入缓存
      wepy.setStorageSync('token',result.data.data.token)
      this.$apply()
    },
    //点击微信支付按钮
    async pay(){
      //创建本次订单需要发送请求,先收集创建本次订单需要的参数数据
      //1. 本次订单的总价格
      let order_price = this.totalPrice + 6
      //判断用户是否选择过地址
      if(!this.address){
        wepy.showToast({
          title:'请选择收货地址'
        })
        return 
      }
      //2. 本次订单的地址
      let consignee_addr = this.address.userAddressMerge
      //3. 本次订单的商品列表详情数据
      let order_detail = JSON.stringify(this.orderList)
      //4. 本次订单的商品指定数据
      let goods = this.orderList.map(item => {
        return {
          'goods_id':item.goods_id,
          'goods_number':item.goods_num,
          'goods_price':item.goods_price
        }
      })
      //console.log(goods);
      let data = {
        order_price,
        consignee_addr,
        order_detail,
        goods
      }
      //发送请求创建订单
      let res = await fetch({
        url:'/my/orders/create',
        method:'POST',
        data,
        header:{
          Authorization : this.token
        }
      })
      console.log(res);
      const number = res.data.data.order_number

      let prepay = await fetch({
        url:'/my/orders/req_unifiedorder',
        method:'POST',
        data:{
          order_number:number
        },
        header:{
          Authorization : this.token
        }
      })
      console.log(prepay);
    }
  }
  onLoad(){
    //加载时去缓存获取地址
    this.getAddress()
    //加载页面时去缓存获取token ,判断用户是否登陆过来控制登录和下单支付按钮的显示
    this.token = wepy.getStorageSync('token') 
  }
  onShow(){
    //每次进入页面就去获取用户选中的商品信息展示
    let ret = wepy.getStorageSync('cart')
    this.orderList = ret.filter(item => item.isChecked)
    //console.log(this.orderList);

  }
  //从缓存中获取地址数据的方法
  getAddress(){
    //从缓存中获取地址,如果有就展示出来,没有就展示新增地址选项
    this.address = wepy.getStorageSync('address')
    if(this.address){
      this.address.userAddressMerge = `${this.address.provinceName}
        ${this.address.cityName}${this.address.countyName}${this.address.detailInfo}`
    }
  }
}
</script>
